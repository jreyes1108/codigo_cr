# The execution line is run under a shell, so special shell 
# characters like '*' should be enclosed in quotes, unless you intend
# they be expanded.
 
# Only processes which are named and have a non-zero value in the Run array below
# are actually started.
# 
Processes &Tbl{
#Orbs
weborb		orbserver  -p $ORB webdataorbserver
cmdweborb	orbserver  -p $CMDORB cmdweborbserver
rtwebserver 	rtwebserver  -v -p pf/rtwebserver.pf
rtcache 	rtcache  -p pf/rtcache.pf $CMDORB
dbwfserver      dbwfserver -P 8888 $DB

#Procesos para adquisicion
#adq2orb	orb2orb -m @pf/adq2orb.pf -S state/adq2orb 10.10.128.155:6290 $ORB
adq2orb	orb2orb -S state/adq2orb 10.10.128.155:6290 $ORB

# Calcular nuevo JSON para web con cada evento
trigger_una orbpftrigger  -select "/pf/orbmag" -start NEWEST :ovsicori event2json -p pf/event2json_una.pf -t 3000000
trigger_sentidos orbpftrigger -select "/pf/orbmag" -start NEWEST :sentido event2json -p pf/event2json_sentidos.pf -t 3000000
}

# Only tasks which have a non-zero value in the following list are
# actually run.
Run     &Arr{
weborb		yes
cmdweborb	yes
adq2orb	 	yes
rtwebserver	1
rtcache		1
dbwfserver	yes
trigger_una     yes
trigger_sentidos     yes
}

# Automatically restart the following tasks if the 
# corresponding parameter file(s) changes
Pf_restart      &Tbl{
}

# The definitions from Defines are substituted into the environment variables 
# and commands below. For example, $ANTELOPE in an environment definition or 
# command line below will become the value of ANTELOPE from the array Defines.

# Please don't change the names for ANTELOPE, ORB, or DB in Defines; 
# other programs (like rtm) use these variables.  If you change DB to MYDB, 
# rtm will no longer have a useful menu item for running dbe on the database.

Defines &Arr{  
ANTELOPE        /opt/antelope/5.4
ORB   	 	:demo
CMDORB          :proc
DB		db/sentido
}


# The following parameters define the environment in which processes
# will execute.  All other environment variables will be eliminated.
Env     &Arr{
ANTELOPE                $ANTELOPE
PATH                    ./bin:$ANTELOPE/bin:/opt/antelope/python2.7.6/bin:/usr/local/bin:/bin:/usr/bin:/usr/sbin:/usr/proc/bin:/usr/openwin/bin:/usr/X11R6/bin:/usr/X11/bin:.
PFPATH                  $ANTELOPE/data/pf:./pf:.
HOME                    PRESERVE
TZ                      PRESERVE
PWD                     PRESERVE
LOGNAME                 PRESERVE
TERM                    PRESERVE || xterm
DISPLAY                 PRESERVE || :0
SCHEMA_DEFAULT          css3.0
SHELL			PRESERVE
XAUTHORITY		PRESERVE
XAUTHLOCALHOSTNAME	PRESERVE
# probably not required
LANG			PRESERVE
XKEYSYMDB		PRESERVE
XDG_SESSION_COOKIE	PRESERVE
XNLSPATH		PRESERVE
XSESSION_IS_UP		PRESERVE
XDG_CONFIG_DIRS		PRESERVE
XMODIFIERS		PRESERVE
XCURSOR_THEME		PRESERVE
XDG_DATA_DIRS		PRESERVE
}

# The Processes list specifies the names and execution lines for each
# subprocess which can be run by rtexec.

# Processes are started in the same order as in the Processes list below.
# While starting processes, rtexec waits Start_period seconds between
# running each process; this is useful when later processes are dependent
# on earlier ones.
Start_period                     10      

# When a process dies, rtexec restarts it automatically; however it 
# also enforces a "cooling off" period of Minimum_period_between_starts.
Minimum_period_between_starts   10      

# Under some circumstances (like misconfiguration or hardware problems), 
# a process may die repeatedly.  The following parameters define 
# an approach to squelching the resultant flurry of activity in the 
# logs and perhaps in email.

# When a process repeatedly dies in times less than the threshold, 
# the period between restarts is repeatedly doubled.
Failure_threshold       300     # 5 minutes

# After so many failure repetitions, the period between restarts is 
# set to the retry period.  mail is sent to anyone specified in
# the startup_shutdown_email parameter.
Failure_repetitions     5       
Failure_retry_period    3600    # 1 hour

# During shutdown, send kill signals to processes in the order named
# in Shutdown_order list.  Each line can contain multiple processes, which 
# will be killed concurrently.  All these processes will have died
# or been sent kill -9 signals before later processes are sent signals.
#
# Usually, one should shut down processes which read from the orb, 
# then processes which write to the orb, and finally, the orbserver itself.
#
# Processes not listed in the Shutdown table are the last to be sent signals.
#
# orbserver is usually the last process to be killed.
Shutdown_order &Tbl{
orb2orb
orbserver 
}

# This array names tasks which cause rtexec to terminate 
# when they die; the corresponding value is the number of
# seconds rtexec waits before shutting down.
Shutdown_when_task_dies	&Arr{
# dbreplay 	20
}

# set this parameter to a list of email addresses which will receive
# email automatically when the system is started or stopped.
startup_shutdown_email  

# resource problems
status_email	

Startup_tasks   &Tbl{
# These are one-shot processes to be run when rtexec first starts.
# The format is the same as in the process table: a task name, followed by the execution line
}

Shutdown_tasks  &Tbl{
# These are one-shot processes to be run when rtexec is shutting down.
# The format is the same as in the process table: a task name, followed by the execution line
}

max_cron_gap    3600    # maximum time gap which the rtexec cron will fill
                        # i.e., cron jobs which would have run during the 
                        # max_cron_gap seconds while rtexec was down for 
                        # some reason (e.g., maintenance) will be run when 
                        # rtexec is restarted.

crontab &Arr{
# These cron jobs are actually run by rtexec.
# Their environment is the same as the rtexec environment.
# stdout and stderr are redirected to logs/name. 
#
#  task    UTC/LOCAL Min Hr Day Month DayOfWeek  Command
# remove old files from directory week
cleartmp LOCAL 5 1 * * * cleartmp week 7
# clean up log files
cleanlogs LOCAL 5 1 * * * truncate_log -r logs/*

# Crear un listado de todos los eventos para el web.
eventosUNA UTC * * * * * event2json -p pf/event2json_una.pf -t 3000000
eventosOVSICORI UTC * * * * * event2json -p pf/event2json_sentidos.pf -t 3000000

# Crear un listado de estaciones para el web
estacionesUNA LOCAL 3 1 * * * stations2json -p pf/stations2json.pf


#Limpiar un poco la memoria
rtcacheREBOOT LOCAL 0 3 * * * rtkill -r rtcache
rtwebserverREBOOT LOCAL 0 5 * * * rtkill -r rtwebserver

}

# rtexec gives processes this much time to quit on their
# own after a signal ; then it sends a kill -9 
Time_to_die     30

# The following are the process resource limits 
Limit   &Arr{
cputime         unlimited
filesize        unlimited
descriptors     unlimited       # large for orb2wf
stacksize       8388608         # unlimited is too big: can't have larger orbs
datasize        unlimited
coredumpsize    unlimited       # so that we may get a core dump
vmemoryuse      unlimited
maxproc		unlimited	# Linux only
}

umask	002

# rtexec keeps some statistics in this database
Database        rtsys/rtsys

# When a program dies due to a segmentation violation
# or bus error, an incident report is generated.  
# email_incident_reports may be set to a list of recipients 
# who will get these reports by email.  BRTT likes to receive
# reports if a standard Antelope program dies this way.
email_incident_reports  incidents@brtt.com

# if include_corefile is "yes", any corefile generated will be 
# sent via email also.
include_corefile        no

Chatter_limit   7200    # minimum gap between messages

disks   &Tbl{
# name    file  minfree_Mbytes min_kinodes description
root      .     200   1  realtime root
tmp       /tmp  200   1  tmp = swap: indicates memory usage
}

####################################################################
# rtm Parameters
# The following parameters are not used directly by rtexec, but
# are instead read and used by rtm.
####################################################################

Buttons &Tbl{  # Use {} instead of '' to conform to tcl's quoting
processes   xterm -geometry 80x25 -e top #  /usr/dt/bin/sdtprocess  # (when top is not available)
ORB_Clients xterm -geometry 132x25 -e orbstat -c $ORB 30
ORB_Sources xterm -geometry 132x60 -e orbstat -s $ORB 30
ORB_Data    warp orbrtd -reject '.*/log|.*/pf/.*' dataorb $ORB 
ORB_Latency tkorblag $ORB
}

# Other files to add to edit menu
Edit_files &Tbl{
}

Parameter_files &Arr{   # if the parameter file doesn't follow the convention
                        # of being named after either the task name or 
                        # the program name, it should be specified here, so
                        # that rtm can allow editing it.
aprogram        different.pf
}

# The following are tasks which talk to the data orbserver, and
# which therefore should have an input and output bar on the 
# Processing Tasks panel of rtm.
orbtasks &Arr{
orb2orb
}

title           Antelope 5.4 WEBSERVICES Arkham # alternate location to specify rtm title
network_code   OV  # network code for rtreport and rtsys


pf_revision_time 1404772361
